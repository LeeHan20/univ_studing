시스템프로그래밍기초 7주차

switch문 
- 정수 리터럴로 변환 가능한 것들만 switch (여기)에 올 수 있음
- 병렬적 처리

for문
- 니가 아는 그거
- 초기식에 변수를 선언하는 것과 않는 것은 스택프레임 생성 위치에 있어 차이가 있음
- 자신을 포함한 함수 내의 변수를 사용할 수도 있고 직접 정의해서 사용할 수도 있음

for문 인자
- 다 비우면 무한반복함
- 초기식을 비우면 자신을 포함한 함수에서 변수를 가져다 쓸 수 있음
- 조건식을 비우면 무한반복함 -> if와 break로 제어함
- 증감식을 비우면 무한반복함 -> 초기식의 변수를 제어할 수 있는 코드를 for문 안에 넣어서 제어함

함수 안의 중괄호
- 함수의 sf(stackframe)에 sf를 새로 만듦
- 내부sf는 외부sf에 있는 정보를 사용 가능하지만 외부sf는 사용하지 못함

getchar() -> 4바이트 반환함
scanf() -> 1바이트 반환함


//시스템프로그래밍 7주차
#include <stdio.h>
#include <limits.h>
#include <math.h>

int main(void) {
    
//    ----------------------- ex -------------------------
//    char ch;
//    
//    printf("enter a character \n");
//    scanf("%c", &ch);
//    
//    if (ch == 'y') {
//        printf("Yes \n");
//    }
//    else {
//        printf("No \n");
//    }
    
//    ----------------------- ex -------------------------
//    int ch;
//    
//    for (;;) {
//        ch = getchar();
//        //ctrl + c -> EOF (end of file) (윈도우)
//        //ctrl + d -> 맥북
//        
//        if (ch == EOF) {
//            break;
//        }
//        else {
//            putchar(ch);
//        }
//    }
//    
//    printf("%lu \n", sizeof(getchar()));
    
//    ----------------------- ex -------------------------
//    int i = 1;
//    while (1) {
//        if (i > 3) {
//            break;
//        }
//        printf("%d \n", i);
//        ++i;
//    }
    
//    ----------------------- ex -------------------------
//    int i = 1;
//    
//    while (i < 4) {
//        printf("%d \n", i);
//        ++i;
//    }
//    
//    i = 0;
//    do {
//        i++;
//        printf("%d \n", i);
//    } while (i < 4);
    
//    ----------------------- ex -------------------------
//    int i = 1;
//    
//    for (; ;) {
//        if (i > 4) {
//            break;
//        }
//        printf("%d \n", i);
//        ++i;
//    }
    
//    ----------------------- ex -------------------------
//    for (int i = 1; i < 4; ++i) {
//        printf("%d \n", i);
//    }
//    
//    int sum = 0;
//    for (int i = 1; i <= 10 ; ++i) {
//        if (i % 2 == 1 ) {
//            continue;
//        }
//        sum += i;
//    }
//    printf("sum is %d \n", sum);
    
//    ----------------------- ex -------------------------
//    int num = 10;
//    
//    int cnt = 1;
//    int sum = 0;
//    for (int i = num; i > 0; --i) {
//        if (num % i == 0) {
//            printf("%d번째 약수는 %d입니다. \n", cnt, i);
//            cnt++;
//            sum += i;
//        }
//    }
//    printf("약수는 총 %d개이며, 약수의 총합은 %d입니다. \n", cnt, sum);
//    if (cnt == 2) {
//        printf("따라서 %d은(는) 소수입니다. \n", num);
//    }
//    else {
//        printf("따라서 %d은(는) 합성수입니다. \n", num);
//    }
    
//    ----------------------- ex -------------------------
//    int sum = 0;
//    
//    for (int i = 0; i <= 10; ++i) {
//        if (i % 2 == 0) {
//            sum += i;
//        }
//    }
//    
//    printf("sum is %d \n", sum);
    
//    ----------------------- ex -------------------------
//    int score = 100;
//    int grade = score / 10;
//    
//    switch (grade) {
//        case 10:
//        case 9:
//            printf("grade A \n");
//            break;
//        case 8:
//            printf("grade B \n");
//            break;
//        case 7:
//            printf("grade C \n");
//        default:
//            printf("grade F \n");
//            break;
//    }
    
//    ----------------------- 5-12 -------------------------
//    char ch;
//    ch = 'A';
//
//    switch (ch) {
//        case 'A':
//            printf("excellent \n");
//            break;
//        case 'B':
//            printf("Good \n");
//            break;
//        case 'C':
//            printf("Not bad \n");
//            break;
//        default:
//            printf("Fail \n");
//            break;
//    }
//
//    printf("Hello \n");
    
    return 0;
}
